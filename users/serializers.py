from rest_framework import serializers
from users.models import User


class UserSerializer(serializers.ModelSerializer):
    """
    Сериализатор для модели пользователя.

    Этот сериализатор используется для преобразования данных пользователя
    в формат JSON и обратно. Он позволяет создать нового пользователя,
    а также обновить информацию о существующем пользователе, включая
    возможность изменения пароля.

    Поля:
        - `id`: Идентификатор пользователя (только для чтения)
        - `email`: Электронная почта пользователя
        - `password`: Пароль пользователя (записываемый только при создании или обновлении, необязателен при обновлении)
        - `first_name`: Имя пользователя
        - `last_name`: Фамилия пользователя
        - `phone`: Телефон пользователя
        - `city`: Город пользователя
        - `avatar`: Аватар пользователя
        - `telegram_chat_id`: Telegram чат ID пользователя
        - `country`: Страна пользователя
        - `nickname`: Никнейм пользователя
        - `groups`: Группы, к которым принадлежит пользователь (только для чтения)
        - `user_permissions`: Разрешения пользователя (только для чтения)
        - `last_login`: Дата и время последнего входа (только для чтения)
        - `is_superuser`: Является ли пользователь суперпользователем (только для чтения)
        - `is_staff`: Является ли пользователь сотрудником (только для чтения)
        - `is_active`: Активен ли пользователь (только для чтения)
        - `date_joined`: Дата регистрации пользователя (только для чтения)
    """

    class Meta:
        model = User
        fields = '__all__'
        extra_kwargs = {
            'password': {'write_only': True, 'required': False}
        }

    def update(self, instance, validated_data):
        """
        Обновляет существующую запись пользователя.

        Переопределенный метод обновления обрабатывает обновления всех
        полей, кроме пароля, и обновляет пароль только в случае его изменения.

        Параметры:
            instance (User): Экземпляр пользователя, который нужно обновить.
            validated_data (dict): Валидированные данные, которые нужно применить к экземпляру пользователя.

        Возвращает:
            User: Обновленный экземпляр пользователя.
        """
        password = validated_data.pop('password', None)
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        if password:
            instance.set_password(password)
        instance.save()
        return instance
